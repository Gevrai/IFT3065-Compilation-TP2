%
%   f = (quote (uquote x) * x) (node _*_ [(node_ unquote "x") "x"])
%
%   f = node_ "*" cons (x, cons (symbol_ "x") nil))
%
%
%     =>       x

%% FIXME: Should be List.map.
List_map : (a : Type) ≡> (b : Type) ≡> (a -> b) -> List a -> List b;
List_map = lambda a b ≡> lambda f xs -> case xs
         | nil => nil
         | cons x xs => cons (f x) (List_map f xs);

%% FIXME: Should be List.head.
List_head : (a : Type) ≡> a -> List a -> a;
List_head = lambda a ≡> lambda x xs -> case xs
          | cons x _ => x
          | nil => x;

quote1 : Sexp -> Sexp;
quote1 x = let k = lambda (a : Type) ≡> lambda (_ : a) -> x;
               node op y = case (sexp_eq op (symbol_ "uquote"))
                           | true  => List_head (symbol_ "<error>") y
                           | false => node_ (quote1 op) (List_map quote1 y)
           in sexp_dispatch_ x node k k k k k;

% quote definition
quote = Macro_ (lambda x -> quote1 (List_head (symbol_ "<error>") x));
